// run using:
// webppl BDA.wppl --require ./refModule/ -- --modelVersion colorSize

// model version can be <colorSize> <typicality> <nominal>

// Fix some configuration options
var config = {
  'modelVersion' : argv.modelVersion
};

// Pull in requested data/conditions 
var data = refModule.getData(config.modelVersion);
console.log("Loading data... found" + data.length + " data points");

var conditions = refModule.getConditions(config.modelVersion);
console.log("Loading unique conditions... found" + conditions.length);

var paramPrior = function() {
  // Params shared by all versions of the model
  var baseParams = {
    alpha : uniformDrift({a: 0, b: 20, w: 3})
  };
  
  var specificParams = (config.modelVersion === 'colorSize' ? {

    colorTyp :        uniformDrift({a: .5, b: 1, w: .5/20}),
    sizeTyp :         uniformDrift({a: .5, b: 1, w: .5/20}),
    colorCost :       uniformDrift({a: 0, b: 40, w: 40/20}),
    sizeCost :        uniformDrift({a: 0, b: 40, w: 40/20}),    
    typWeight :       1
    
  } : _.includes(['typicality', 'nominal'], config.modelVersion) ? {
    
    lengthCost : uniformDrift({a: 0, b: 5, w: 1}),
    freqCost :   0,//uniformDrift({a: 0, b: 5, w: 1}),
    typWeight :  uniformDrift({a: 0, b: 5, w: 1})
        
  } : console.error('unknown modelVersion: ' + config.modelVersion));

  return extend(config, baseParams, specificParams);
};

var modelAnalysis = function() {

  var params = paramPrior();
  var lexicon = refModule.constructLexicon(params);
  var modelParams = extend(params, {lexicon});
  var likelihood = reduce(function(c, memo) {
    // Extract condition information
    var context = c.context;
    var target = context[0];
    
    // Condition on data
    var itemData = refModule.getSubset(data, _.omit(c, 'context'));
    return memo + reduce(function(datum, memo) {
      return memo + refModule.getSpeakerScore(datum.response, target, context, modelParams);
    }, 0, itemData);
  }, 0, conditions);

  factor(likelihood);
  console.log(likelihood);
  
  var paramsKey = _.values(_.omit(params, ['modelVersion'])).join(',');
  return {
    output : _.zipObject([paramsKey], [likelihood]),
    version: params.modelVersion + '_params:obj'
  };
};

// Some versions take longer to run than others, so we tune settings to match
var inferenceSettings = {
  model: modelAnalysis, method:'MCMC', verbose: true,
  samples: config.modelVersion == 'colorSize' ? 2000 : 1000,
  lag: config.modelVersion == 'colorSize' ? 10 : 5,
  burn: config.modelVersion == 'colorSize' ? 10000 : 7500
};

//modelAnalysis();
var outputERP = Infer(inferenceSettings);

refModule.bayesianErpWriter(outputERP);
