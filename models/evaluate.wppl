// simulates model forward with given params/context 
// webppl simulate.wppl --require ../refModule/ -- --modelVersion <colorSize> 
var config = {
  'modelVersion' : argv.modelVersion
};

// Pull in requested data/conditions 
var data = refModule.getData(config.modelVersion);
console.log("Loading data... found" + data.length + " data points");

var conditions = refModule.getConditions(config.modelVersion);
console.log("Loading unique conditions... found" + conditions.length);

// Pull in requested data/conditions and extract highest scoring MCMC sample
var paramPosterior = refModule.getParamPosterior(config.modelVersion);
var MAP = _.find(paramPosterior, function(x) {
    return x === _.max(_.map(paramPosterior, 'logLikelihood'));
});

var params = extend({}, config, MAP);

var modelAnalysis = function() {

  var lexicon = refModule.constructLexicon(params);
  var speakerModel = initializeModel(extend(params, {lexicon}));

  foreach(conditions, function(c) {
    // Extract condition information
    var conditionName = c.condition;
    var context = c.context;
    var target = context[0];
    
    // Run model
    var modelOutput = speakerModel(target, context);

    // Store predives
    foreach(modelOutput.support(), function(s){
      var key = _.values(_.omit(c, 'context')).concat(s);
      var newPair = _.zipObject([key], [modelOutput.score(s)]);
      globalStore.predictives = extend(globalStore.predictives, newPair);
    });
  });

  return {output: globalStore.predictives,
	  version : params.modelVersion + '_predictives:obj'}; //predictive: globalStore.predictives, 
};

var outputERP = Infer({method:'enumerate', model: modelAnalysis});
refModule.bayesianErpWriter(outputERP);
