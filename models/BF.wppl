// run using:
// webppl BDA.wppl --require ./refModule/ -- --modelVersion colorSize
// webppl BDA.wppl --require ./refModule/ -- --modelVersion colorSize --constraint yokeCosts
// webppl BDA.wppl --require ./refModule/ -- --modelVersion colorSize --constraint yokeTyps

// model version can be <colorSize> <typicality> <nominal>

// Fix some configuration options
var config = {
  'modelVersion' : argv.modelVersion,
  'costs' : argv.costs,
  'semantics' : argv.semantics
};

// Pull in requested data/conditions 
var data = refModule.getData(config.modelVersion);
//console.log("Loading data... found" + data.length + " data points");

var conditions = refModule.getConditions(config.modelVersion);
// console.log("Loading unique conditions... found" + conditions.length);

var getSemanticParams = function(semantics) {
  if(semantics === 'fixed') {
    return {
      colorTyp : uniformDrift({a: .5, b: 1, w: .5/20}),
      sizeTyp : config.modelVersion == 'colorSize' ? uniformDrift({a: .5, b: 1, w: .5/20}) : 0,
      typeTyp : config.modelVersion == 'typicality' ? uniformDrift({a: .5, b: 1, w: .5/20}) : 0,
      typWeight : 1
    };
  } else if (semantics === 'empirical') {
    return {
      typWeight :  uniformDrift({a: 0, b: 5, w: 1})
    };
  } else {
    console.error('unknown modelspecification: model version: ' + config.modelVersion +
		  '; costs: ' + config.costs + '; semantics: ' + config.semantics);
  }
};

var paramPrior = function() {
  // Params shared by all versions of the model
  var baseParams = {
    infWeight : uniformDrift({a: 0, b: 20, w: 3})
  };

  var costParams = (config.costs === 'fixed'  ? {
    colorCost : uniformDrift({a: 0, b: 5, w: 40/20}),
    sizeCost :  config.modelVersion == 'colorSize' ? uniformDrift({a: 0, b: 5, w: 40/20}) : 0,
    typeCost :  config.modelVersion == 'typicality' ? uniformDrift({a: 0, b: 5, w: 40/20}) : 0
  } : config.costs === 'none'  ? {
    colorCost : 0, sizeCost :  0, typeCost :  0
  } : config.costs === 'empirical' ? {
    lengthCostWeight : uniformDrift({a: 0, b: 5, w: 1}),
    freqCostWeight :   uniformDrift({a: 0, b: 5, w: 1})
  } : console.error('unknown modelspecification: ' + config.modelVersion + ' ' +
		    config.costs + ' ' + config.semantics));
  
  var semanticParams = (config.semantics == 'fixedplusempirical' ?
			extend(getSemanticParams('fixed'), getSemanticParams('empirical'),
			       {fixedVsEmpirical: uniformDrift({a: 0, b: 1, w: 1/20})}) :
			getSemanticParams(config.semantics));
  return extend(config, baseParams, costParams, semanticParams);
};

var modelAnalysis = function() {

  var params = paramPrior();
  var lexicon = refModule.constructLexicon(params);
  var modelParams = extend(params, {lexicon});
  map(function(datum) {
    // Extract condition information
    var context = datum.context;
    var target = context[0];
    
    // Condition on data
    factor(refModule.getSpeakerScore(datum.response, target, context, modelParams));
  }, data);

  return {
    version: params.modelVersion + '_params:obj'
  };
};

[config.modelVersion, config.costs, config.semantics, AIS(modelAnalysis, {samples: 1, steps: 30000})].join(',')
