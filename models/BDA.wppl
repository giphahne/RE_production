// run using:
// webppl BDA.wppl --require ./refModule/ -- --modelVersion colorSize

// model version can be <colorSize> <typicality> <nominal>

// Fix some configuration options
var config = {
  'storePredictives' : false,
  'modelVersion' : argv.modelVersion
};

// Pull in requested data/conditions 
var data = refModule.getData(config.modelVersion);
console.log("Loading data... found" + data.length + " data points");

var conditions = refModule.getConditions(config.modelVersion);
console.log("Loading unique conditions... found" + conditions.length);

var paramPrior = function() {
  // Params shared by all versions of the model
  var baseParams = {
    alpha : uniformDrift({a: 0, b: 40, w: 40/20}),
    costWeight : uniformDrift({a: 0, b: 40, w: 40/20})
  };

  var specificParams = (config.modelVersion === 'colorSize' ? {

    colorTyp :        uniformDrift({a: .5, b: 1, w: .5/20}),
    sizeTyp :         uniformDrift({a: .5, b: 1, w: .5/20}),
    colorVsSizeCost : uniformDrift({a: 0, b: 1, w: 1/20}),
    typWeight :       1
    
  } : _.includes(['typicality', 'nominal'], config.modelVersion) ? {

    lengthVsFreqCost: uniformDrift({a: 0, b: 1, w: 1/20}),
    typWeight :       uniformDrift({a: 0, b: 10, w: 10/20})
        
  } : console.error('unknown modelVersion: ' + config.modelVersion));

  return extend(config, baseParams, specificParams);
};

var modelAnalysis = function() {

  var params = paramPrior();
  var lexicon = refModule.constructLexicon(params);
  var speakerModel = initializeModel(extend(params, {lexicon}));

  var likelihood = reduce(function(c, memo) {
    // Extract condition information
    var conditionName = c.condition;
    var context = c.context;
    var target = context[0];
    
    // Run model
    var modelOutput = speakerModel(target, context);

    // Store predives
    if(config.storePredictives) {
      foreach(modelOutput.support(), function(s){
  	var key = _.values(c).concat(s);
  	var newPair = _.zipObject([key], [Math.exp(modelOutput.score(s))]);
  	globalStore.predictives = extend(globalStore.predictives, newPair);
      });
    }
    
    // Condition on data
    var itemData = refModule.getSubset(data, _.omit(c, 'context'));
    return memo + reduce(function(datum, memo) {
      return memo + modelOutput.score(datum.response);
    }, 0, itemData);
  }, 0, conditions);

  factor(likelihood);
  //console.log(likelihood);
  var paramsKey = _.values(_.omit(params, ['storePredictives', 'modelVersion'])).join(',');
  //console.log(_.keys(_.omit(params, ['storePredictives', 'modelVersion'])).join(','));
  return {
    output : _.zipObject([paramsKey], [likelihood]),
    version: params.modelVersion + '_params:obj'
  }; //predictive: globalStore.predictives, 
};

var outputERP = Infer({model: modelAnalysis, method:'MCMC', verbose: true,
		       samples: 2000, lag: 10, burn: 10000});

refModule.bayesianErpWriter(outputERP);
